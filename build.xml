<?xml version="1.0"?>

<project name="Detroubulator" default="compile" basedir=".">

	<property name="app.name" value="detroubulator"/>
	<property name="version.short" value="1.1.0"/>
	<property name="version.readable" value="1.1.0"/>
	<property name="app.name.versioned" value="${app.name}-${version.short}"/>
	<property name="jar" value="${app.name.versioned}.jar"/>
	<property name="source.dir" value="src"/>
	<property name="tests.dir" value="tst"/>
	<property name="extlib.dir" value="external"/>
	<property name="build.dir" value="build"/>
	<property name="inst.dir" value="${app.name.versioned}"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.tests" value="${build.dir}/tests"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="release.dir" value="dist"/>
	<property name="release.archive" value="${app.name.versioned}.zip"/>
	<property name="src.archive" value="${app.name.versioned}-src.zip"/>
	<property name="temp.dir" value="temp"/>

	<path id="classpath.build">
		<pathelement location="${extlib.dir}/aii_map_api.jar"/>
		<pathelement location="${extlib.dir}/sapjco.jar"/>
	</path>

	<!-- The JUnit classes are required while compiling and running unit tests. However, they are made available by Ant when the JUnit JAR is placed in Ant's lib directory. -->

	<path id="classpath.compiletests">
		<pathelement location="${build.classes}"/>
		<pathelement location="${extlib.dir}/easymock.jar"/>
	</path>

	<path id="classpath.runtests">
		<pathelement location="${build.classes}"/>
		<pathelement location="${build.tests}"/>
		<pathelement location="${extlib.dir}/aii_map_api.jar"/>
		<pathelement location="${extlib.dir}/easymock.jar"/>
	</path>

	<target name="prepare" description="Creates all directories required by the build">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.tests}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${release.dir}"/>
	</target>

	<target name="clean" description="Removes all files and directories generated by Ant">
		<delete dir="${build.dir}"/>
		<delete dir="${build.classes}"/>
		<delete dir="${build.tests}"/>
		<delete dir="${build.lib}"/>
		<delete dir="${release.dir}"/>
		<delete dir="${temp.dir}"/>
	</target>

	<target name="compile" depends="prepare" description="Compiles all non-test source files">
		<javac srcdir="${source.dir}" destdir="${build.classes}" source="1.6" target="1.6">
			<classpath refid="classpath.build"/>
		</javac>
	</target>

	<target name="jar" depends="compile" description="Generates the Detroubulator JAR archive">
		<jar jarfile="${build.lib}/${jar}">
			<fileset dir="${build.classes}" includes="**/*.class"/>
			<zipfileset dir="etc" includes="testfile_schema.xsd, testreport_v110.xslt" prefix="resources"/>
		</jar>
	</target>

	<target name="varsubst" description="Replaces variables in all files within a single directory">
		<replace dir="${subst.dir}" encoding="UTF-8" summary="true">
			<replacefilter token="$version$" value="${version.readable}"/>
			<replacefilter token="$release.archive$" value="${release.archive}"/>
			<replacefilter token="$source.archive$" value="${src.archive}"/>
			<replacefilter token="$detroubulator.jar$" value="${jar}"/>
			<replacefilter token="$inst.dir$" value="${app.name.versioned}"/>
		</replace>
	</target>

	<target name="dist" depends="jar, runtests" description="Generates a release archive ready for distribution">
		<!-- Create temporary directories. -->
		<delete dir="${temp.dir}"/>
		<mkdir dir="${temp.dir}"/>
		<mkdir dir="${temp.dir}/varsubst"/>
		<!-- Substitute variables in all HTML files and launch scripts. Note that the files must be copied to a temporary directory, since the Replace task changes files in place, which we don't want to. -->
		<copy todir="${temp.dir}/varsubst">
			<fileset dir="." includes="docs/*.html"/>
			<fileset dir="." includes="scripts/*"/>
			<fileset dir="distfiles" includes="README.html, CHANGES.html"/>
		</copy>
		<antcall target="varsubst">
			<param name="subst.dir" value="${temp.dir}/varsubst"/>
		</antcall>
		<!-- Create an archive containing the source. -->
		<zip destfile="${temp.dir}/${src.archive}" update="no">
			<fileset dir="." includes="${source.dir}/**, ${tests.dir}/**, distfiles/**, docs/**, etc/**, scripts/**, external/**, abap/**" excludes="external/*.jar"/>
			<fileset dir="." includes="build.xml"/>
		</zip>
		<!-- Create a release archive. -->
		<zip destfile="${release.dir}/${release.archive}" update="no">
			<zipfileset dir="${temp.dir}/varsubst/scripts" prefix="${inst.dir}/bin"/>
			<zipfileset dir="${build.lib}" includes="${jar}" prefix="${inst.dir}/lib"/>
			<zipfileset dir="${temp.dir}/varsubst" includes="docs/**" prefix="${inst.dir}/"/>
			<zipfileset dir="etc" includes="testfile_schema.xsd, testreport_v110.xslt" prefix="${inst.dir}/docs/misc"/>
			<zipfileset dir="${temp.dir}/varsubst" includes="README.html, CHANGES.html" prefix="${inst.dir}/"/>
			<zipfileset dir="." includes="docs/images/*" prefix="${inst.dir}/"/>
			<zipfileset dir="." includes="docs/styles/*" prefix="${inst.dir}/"/>
			<zipfileset dir="." includes="docs/sample/*" prefix="${inst.dir}/"/>
			<zipfileset dir="." includes="abap/*" prefix="${inst.dir}/"/>
			<zipfileset dir="distfiles" includes="LICENSE" prefix="${inst.dir}/"/>
			<zipfileset dir="${temp.dir}" includes="${src.archive}" prefix="${inst.dir}/"/>
		</zip>
		<!-- Clean up. -->
		<delete dir="${temp.dir}"/>
	</target>

	<target name="compiletests" depends="compile" description="Compiles all JUnit unit tests">
		<javac srcdir="${tests.dir}" destdir="${build.tests}" source="1.5" target="1.5">
			<classpath refid="classpath.compiletests"/>
		</javac>
	</target>

	<target name="runtests" depends="compile, compiletests" description="Executes all JUnit unit tests">
		<junit printsummary="on" haltonerror="yes">
			<classpath refid="classpath.runtests"/>
			<batchtest>
				<fileset dir="${build.tests}"/>
			</batchtest>
		</junit>
	</target>

</project>